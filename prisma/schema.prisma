generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users

enum Role {
  ADMIN
  PLAYER
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     Role   @default(PLAYER)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Character Character[]
}

// Bonds

enum BondEmotion {
  admiration
  loyalty
  affection
  inferiority
  mistrust
  hatred
}

model Bond {
  id       String        @id @default(uuid())
  name     String
  emotions BondEmotion[]

  characterId String
  character   Character @relation(fields: [characterId], references: [id])
}

// Status Effects

enum Attribute {
  DEX
  INS
  MIG
  WLP
}

model StatusEffect {
  id                 String                  @id @default(uuid())
  name               String                  @unique
  characters         CharacterStatusEffect[]
  affectedAttributes Attribute[]
}

// Classes

model Class {
  id          String       @id
  name        String       @unique
  description String
  questions   String[]
  benefits    Json
  skills      Skill[]
  Spell       Spell[]
  ClassLevel  ClassLevel[]
}

// Skills

model Skill {
  id             String           @id
  name           String
  description    String
  maxRank        Int
  classId        String
  class          Class            @relation(fields: [classId], references: [id])
  CharacterSkill CharacterSkill[]
}

// Spells

enum SpellDuration {
  scene
  instantaneous
}

model Spell {
  id             String           @id
  name           String
  description    String
  isOffensive    Boolean
  mpCost         String
  target         String
  duration       SpellDuration
  classId        String
  class          Class            @relation(fields: [classId], references: [id])
  CharacterSpell CharacterSpell[]
}

// Equipment

enum WeaponCategory {
  arcane
  bow
  brawling
  dagger
  firearm
  flail
  heavy
  spear
  sword
  thrown
}

enum Range {
  melee
  ranged
}

enum DamageType {
  physical
  magical
}

model Weapon {
  id            String         @id
  name          String
  category      WeaponCategory
  isBasic       Boolean
  isMartial     Boolean
  cost          Int
  handsRequired Int
  range         Range
  accuracy      String
  damage        String
  damageType    DamageType
  quality       String?
}

model Armour {
  id              String      @id
  name            String
  cost            Int
  isBasic         Boolean
  isMartial       Boolean
  usesDex         Boolean
  dexBonus        Int
  usesIns         Boolean
  insBonus        Int
  initiativeBonus Int
  quality         String?
  Character       Character[]
}

model Shield {
  id                String  @id
  name              String
  cost              Int
  isBasic           Boolean
  isMartial         Boolean
  defenseBonus      Int
  magicDefenseBonus Int
  initiativeBonus   Int
  quality           String?
}

model Accessory {
  id          String      @id @default(uuid())
  name        String
  cost        Int
  description String
  Character   Character[]
}

// Characters

model ClassLevel {
  id      String @id @default(uuid())
  classId String
  level   Int

  characterId String
  character   Character @relation(fields: [characterId], references: [id])
  class       Class     @relation(fields: [classId], references: [id])
}

model CharacterSkill {
  id          String @id @default(uuid())
  skillId     String
  characterId String
  rank        Int

  character Character @relation(fields: [characterId], references: [id])
  skill     Skill     @relation(fields: [skillId], references: [id])
}

model CharacterSpell {
  id          String @id @default(uuid())
  spellId     String
  characterId String

  character Character @relation(fields: [characterId], references: [id])
  spell     Spell     @relation(fields: [spellId], references: [id])
}

model CharacterStatusEffect {
  id             String @id @default(uuid())
  characterId    String
  statusEffectId String

  character    Character    @relation(fields: [characterId], references: [id])
  statusEffect StatusEffect @relation(fields: [statusEffectId], references: [id])
}

enum ItemType {
  weapon
  shield
}

model Character {
  id             String  @id @default(uuid())
  name           String
  identity       String
  theme          String
  origin         String
  pronouns       String
  profilePicture String?

  // Attributes
  dexBase    String
  dexCurrent String
  insBase    String
  insCurrent String
  migBase    String
  migCurrent String
  wlpBase    String
  wlpCurrent String

  hpMax     Int
  hpCurrent Int
  mpMax     Int
  mpCurrent Int
  ipMax     Int
  ipCurrent Int

  bonds       Bond[]
  classLevels ClassLevel[]
  skills      CharacterSkill[]
  spells      CharacterSpell[]

  statusEffects CharacterStatusEffect[]

  // Equipment

  zenit Int @default(0)

  // Polymorphic slots (can be either weapon or shield)

  mainHandId   String?
  mainHandType ItemType?
  offHandId    String?
  offHandType  ItemType?

  // Dedicated slots

  armourId    String?
  armour      Armour?    @relation(fields: [armourId], references: [id])
  accessoryId String?
  accessory   Accessory? @relation(fields: [accessoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
